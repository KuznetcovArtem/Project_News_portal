# Создать двух пользователей (с помощью метода User.objects.create_user('username')).
>>> u1 = User.objects.create_user(username='Artem')
>>> u2 = User.objects.create_user(username='Ivan')  
# Создать два объекта модели Author, связанные с пользователями.
>>> Author.objects.create(authorUser=u1)
>>> Author.objects.create(authorUser=u2) 
# Добавить 4 категории в модель Category.
>>> Category.objects.create(name='Sport')
>>> Category.objects.create(name='News')  
>>> Category.objects.create(name='Interesting')
>>> Category.objects.create(name='Economy')     
# Добавить 2 статьи и 2 новость для Автора 1.
>>> author = Author.objects.get(id=1)
>>> Post.objects.create(author=author, categoryType='NW', title='sometitle', text='someBIGtext')                                                        
>>> Post.objects.create(author=author, categoryType='NW', title='sometitle_two', text='someBIGtext_two')
>>> Post.objects.create(author=author, categoryType='AR', title='sometitle_three', text='someBIGtext_three')
>>> Post.objects.create(author=author, categoryType='AR', title='sometitle_four', text='someBIGtext_four')
# Добавить 0 статьи и 1 новость для Автора 2. Из-за проблемы с проверкой на None для commentRat
>>> author = Author.objects.get(id=2)   
>>> Post.objects.create(author=author, categoryType='AR', title='sometitle_five', text='someBIGtext_five')
# Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
>>> Post.objects.get(id=1).postCategory.add(Category.objects.get(id=1))                                    
>>> Post.objects.get(id=2).postCategory.add(Category.objects.get(id=1)) 
>>> Post.objects.get(id=3).postCategory.add(Category.objects.get(id=2)) 
>>> Post.objects.get(id=4).postCategory.add(Category.objects.get(id=3)) 
>>> Post.objects.get(id=4).postCategory.add(Category.objects.get(id=4))
# Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).
>>> Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=1).authorUser, text='comment_one')
>>> Comment.objects.create(commentPost=Post.objects.get(id=2), commentUser=Author.objects.get(id=1).authorUser, text='comment_two') 
>>> Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=Author.objects.get(id=2).authorUser, text='comment_three') 
>>> Comment.objects.create(commentPost=Post.objects.get(id=4), commentUser=Author.objects.get(id=2).authorUser, text='comment_four')
# Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
>>> Comment.objects.get(id=1).like()
>>> Comment.objects.get(id=2).like() 
>>> Comment.objects.get(id=3).like() 
>>> Comment.objects.get(id=4).dislike()
>>> Comment.objects.get(id=4).dislike()
Обновить рейтинги пользователей.
>>> Author.objects.get(id=1)
>>> a = Author.objects.get(id=1)
>>> a.update_rating()
>>> Author.objects.get(id=2)
>>> a = Author.objects.get(id=2)
>>> a.update_rating()
# Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).
>>> a = Author.objects.order_by('-ratingAuthor')[:1]
>>> a
>>> for i in a:
...     i.ratingAuthor
...     i.authorUser.username
... 
# Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.
>>> Post.objects.order_by('-rating').values('author__authorUser__username', 'rating', 'title')[0]

!!!Не верно!!!
# Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
>>> Post.objects.values('dateCreation', 'author__authorUser__username', 'rating', 'title')

Возможно,

# Вывод статьи\новости с наибольшим рейтингом
best_post = Post.objects.order_by('-rating').values('author__authorUser__username', 'rating', 'title')[0]
the_post = Post.objects.get(rating=best_post['rating'])
the_post
best_post_comments = the_post.comment_set.all()
best_post_comments